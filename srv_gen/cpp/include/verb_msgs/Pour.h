/* Auto-generated by genmsg_cpp for file /home/joschu/Dropbox/myros/verb_msgs/srv/Pour.srv */
#ifndef VERB_MSGS_SERVICE_POUR_H
#define VERB_MSGS_SERVICE_POUR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/PointCloud2.h"



namespace verb_msgs
{
template <class ContainerAllocator>
struct PourRequest_ {
  typedef PourRequest_<ContainerAllocator> Type;

  PourRequest_()
  : object_clouds()
  {
  }

  PourRequest_(const ContainerAllocator& _alloc)
  : object_clouds(_alloc)
  {
  }

  typedef std::vector< ::sensor_msgs::PointCloud2_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::other >  _object_clouds_type;
  std::vector< ::sensor_msgs::PointCloud2_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::other >  object_clouds;


  typedef boost::shared_ptr< ::verb_msgs::PourRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::verb_msgs::PourRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PourRequest
typedef  ::verb_msgs::PourRequest_<std::allocator<void> > PourRequest;

typedef boost::shared_ptr< ::verb_msgs::PourRequest> PourRequestPtr;
typedef boost::shared_ptr< ::verb_msgs::PourRequest const> PourRequestConstPtr;


template <class ContainerAllocator>
struct PourResponse_ {
  typedef PourResponse_<ContainerAllocator> Type;

  PourResponse_()
  : success(false)
  {
  }

  PourResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::verb_msgs::PourResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::verb_msgs::PourResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PourResponse
typedef  ::verb_msgs::PourResponse_<std::allocator<void> > PourResponse;

typedef boost::shared_ptr< ::verb_msgs::PourResponse> PourResponsePtr;
typedef boost::shared_ptr< ::verb_msgs::PourResponse const> PourResponseConstPtr;

struct Pour
{

typedef PourRequest Request;
typedef PourResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Pour
} // namespace verb_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::verb_msgs::PourRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::verb_msgs::PourRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::verb_msgs::PourRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0758852ea488dd0cd89930fe551a3bee";
  }

  static const char* value(const  ::verb_msgs::PourRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0758852ea488dd0cULL;
  static const uint64_t static_value2 = 0xd89930fe551a3beeULL;
};

template<class ContainerAllocator>
struct DataType< ::verb_msgs::PourRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "verb_msgs/PourRequest";
  }

  static const char* value(const  ::verb_msgs::PourRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::verb_msgs::PourRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/PointCloud2[] object_clouds\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
";
  }

  static const char* value(const  ::verb_msgs::PourRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::verb_msgs::PourResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::verb_msgs::PourResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::verb_msgs::PourResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::verb_msgs::PourResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::verb_msgs::PourResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "verb_msgs/PourResponse";
  }

  static const char* value(const  ::verb_msgs::PourResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::verb_msgs::PourResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
";
  }

  static const char* value(const  ::verb_msgs::PourResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::verb_msgs::PourResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::verb_msgs::PourRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.object_clouds);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PourRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::verb_msgs::PourResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PourResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<verb_msgs::Pour> {
  static const char* value() 
  {
    return "cce057bdbc2bddff02e4e9bc43e56930";
  }

  static const char* value(const verb_msgs::Pour&) { return value(); } 
};

template<>
struct DataType<verb_msgs::Pour> {
  static const char* value() 
  {
    return "verb_msgs/Pour";
  }

  static const char* value(const verb_msgs::Pour&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<verb_msgs::PourRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cce057bdbc2bddff02e4e9bc43e56930";
  }

  static const char* value(const verb_msgs::PourRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<verb_msgs::PourRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "verb_msgs/Pour";
  }

  static const char* value(const verb_msgs::PourRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<verb_msgs::PourResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cce057bdbc2bddff02e4e9bc43e56930";
  }

  static const char* value(const verb_msgs::PourResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<verb_msgs::PourResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "verb_msgs/Pour";
  }

  static const char* value(const verb_msgs::PourResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VERB_MSGS_SERVICE_POUR_H

